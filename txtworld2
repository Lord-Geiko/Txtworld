import os
import time
import random

def delay_print(s):
    for c in s:
        print(c, end='', flush=True) #print each character without new line
        time.sleep(0.10) # add a delay between characters

#Copyright 2024
#quit() #to end game


# Checks if the file to save has been created
file_exists = os.path.isfile("loadfile.txt")

#skeleton key for rooms
#def room():

   # s = ""
    #save(s)

    #while True:

        #print()
        #direction == input().lower()
       # if direction == '':
           # os.system('cls')
            #room name go to next
        #if direction == '':
            #room name
        #else:
            #print("Invalid Input! Please choose again!")
#skeleton for enumerate inventory
#def printInventory():

    #input == "see inventory".lower()
    #print("This is your inventory: ")
    #for slot in range(len(inventory)):
       # item = inventory[slot]
       # print(f"{slot}: {item}")
    #pass
#health
#def room(health):
     #print("You are attacked")
    # health = health - 5
    # return health
#def attack(player_health):
        #player_health - 5
        #return player_health
#def monster(monster_health):
        #print("You face a might dragon... he attacks you!!")
        #health = attack(player_health)
        #print("you suffer burns", player_health, "health left")

#load the text file
def load():
    if file_exists:
        file=open("loadfile.txt", "r")
        room = file.read()
        file.close()
    else:
        room = "Dungeon"

    roomchooser(room)

def save(s):
    file = open("loadfile.txt", "w")
    file.write(s)
    file.close()

def roomchooser(room):
    if room == "Dungeon":
        Dungeon()
    if room == "kitchen_room":
        kitchen_room()
    if room == "hallway_room":
        hallway_room()
    if room == "sewer_room":
        sewer_room()
    if room == "goblin_room":
        goblin_room()
    if room == "random_room":
        random_room()
    if room == "game_over":
        menu_room()

def __init__(self, name, health, attack_range, gold_range):

    self.name = name
    self.health = health
    self.attack = random.randit(*attack_range)
    self.gold_gain = random.randint(*gold_range)

current_room = "Dungeon"
player_health = 100

inventory = ["rusted sword", "rubber slipper"]

#sub-routine to add items to the inventory
def addtoinventory(item):
    inventory.append(item)

def printInventory():
    for i in inventory:
        print(i)
    pass

class Player:
    def __init__(self, name):
        self.name = name
        self.maxhealth = 100
        self.health = self.maxhealth
        self.base_attack = 10
        self.gold = 1
        self.potions = 0
        self.weapons = ["Rusty Sword"]
        self.current_weapon = "Rusty Sword"
        self.weapon_bonus = {"Rusty Sword": 15} 
        self.current_room = "Dungeon"

    def __str__(self):
        return f"       {self.name}\n       GOLD: {self.gold}\n"
    
    def take_damage(self, damage):
        self.health -= damage
        
    def heal(self, amount):
        self.health = min(self.maxhealth, self.health + amount)  # corrected here
        
    def attack_npc(self, npc):
        bonus = self.weapon_bonus.get(self.current_weapon, 0)  # get the bonus attack value
        total_attack = self.base_attack + bonus  # add the bonus to the base attack
        npc.take_damage(total_attack)  # use the total attack value


class NPC:
    def __init__(self, name, health, attack):
        self.name = name
        self.health = health
        self.attack = attack
        
    def take_damage(self, damage):
        self.health -= damage

def display_player_info(player, current_room, inventory, player_health):
    print(f"{player.name} is in the {player.current_room}\nInventory: {inventory}\nPlayer Health: {player.health}HP\n{'-' * 27}")


def Dungeon(player):
    
    s = "Dungeon"
    save(s)
    player.current_room = "Dungeon"

    while True:
        

        os.system('cls')
        display_player_info(player, current_room, inventory, player_health)
        print("You woke up in a Dungeon, feeling dizzy, looking around you notice an Copper coin on the floor.....")
        print("Do you want to pick it up?")
        print("Yes/No")
        
        pickup = input()
        if pickup == "yes".lower():
            addtoinventory("copper coin")
            print("You pick up the copper coin and walk into a dark Hallway")
            goblin_room(player)
        if pickup == "no".lower():
            print("so you leave the room and walk down the hallway")
            goblin_room(player)
        else:
            print("Invalid Input.. Please try again")
        Dungeon(player)

def play_game(player):

    os.system('cls')
    display_player_info(player, current_room, inventory, player_health)
    game_over = False
    while player.health > 0 and not game_over:
        current_room = get_current_room(player)
        print("You are in " + current_room)
        
        if current_room == "fight room":
            print("You find yourself in a dark room. You see a door in front of you.")
            action = input("What would you like to do? (enter 'door' to proceed): ")
            if action.lower() == "door":
                player.current_room = "beach"
        
        elif current_room == "beach":
            print("You teleport on a sunny beach.")
            npc = NPC("Goblin", 50, 10)
            print("A wild " + npc.name + " appears!")
            while npc.health > 0 and player.health > 0:
                print("\nPlayer Health:", player.health)
                print(npc.name + " Health:", npc.health)
                action = input("What would you like to do? (enter 'attack' to attack, 'run' to run away): ")
                
                if action.lower() == "attack":
                    player.attack_npc(npc)
                    if npc.health > 0:
                        npc_attack = random.randint(1, 10)
                        player.take_damage(npc_attack)
                elif action.lower() == "run":
                    print("You ran away from the " + npc.name + ".")
                    print("GAME_OVER")
                    game_over = True
                    break
                else:
                    print("Invalid action. Try again.")
                
            if player.health <= 0:
                print("You were defeated by the " + npc.name + ". Game Over.")
                game_over = True
                
            elif not game_over:
                print("You defeated the " + npc.name + ". You find a potion and some gold.")

                player.potions += 1
                player.gold += random.randint(1, 10)
                player.current_room = "sewer room"
                sewer_room(player)
                break

def kitchen_room(player):

    s = "kitchen_room"
    save(s)
    player.current_room = "Kitchen looking area"
    
    while True:

        
        os.system('cls')
        display_player_info(player, current_room, inventory, player_health)
        print("You walk into a area that looks like a kitchen.\nLooking around you see BIG Roaches flying around a dim light bulb thats slowly moving back and forth\nTiny mice eating old mouldy bread.\n Do you want to retrieve the old mouldy bread")
        print("yes or no?")
        pickup = input().lower()

        if pickup == "yes".lower():

            os.system('cls')
            addtoinventory("mouldy bread")
            print(f"{player.name} picked up the Mouldy Bread and put it in his pocket")
            print("You exit the Kitchen looking area")
            print("Looking left is a long path of darkness")
            print("Looking right is a dim light shining from a short distance")
            print("*"*10)
            print("Do you choose to go Left or Right")

        elif pickup == "no".lower():

            os.system('cls')    
            print(f"{player.name} ignores getting the mouldy bread from the dirty looking mice")
            print("You exit the Kitchen looking area")
            print("Looking left is a long path of darkness")
            print("Looking right is a dim light shining from a short distance")
            print("*"*10)
            print("Do you choose to go Left or Right")

        direction = input().lower()
        if direction =="right":
            random_room(player)
            os.system('cls')
        if direction == "left":
            sewer_room(player)           
        else:
            print("Invalid Input! Please choose again")

def hallway_room(player):

    s = "hallway_room"
    save(s)
    player.current_room = "Darkness of a Hallway"

    while True:

        os.system('cls')
        display_player_info(player, current_room, inventory, player_health)
        print("You start walking down a dimly lit hallway,\nwith only the flickering light from a single torch casting eerie shadows on the moss covered cobblestone walls\nThe air is damp and carries a faint, musty rotten onion odor.")
        print("As you take a cautious step foward\nthe floorboards creak under your weight\nechoing through the darkness silence\nThe hallway stretches ahead\ndisappearing into darkness\nYou can barely make out the outline shadow of something very Colossal running up towards you")
        print("Will you choose to run or stay to fight")
        print("*"*10)
        print("run or fight: ")
        
        direction = input().lower()
        if direction =="run":
            os.system('cls')
            game_over(player)
        elif direction == "fight":
            os.system('cls')
            fight_room(player)
        else:
            print("Invalid Input! Please choose again")

def sewer_room(player):

    s = "sewer_room"
    save(s)

    while True:
        
        os.system('cls')
        display_player_info(player, current_room, inventory, player_health)
        print("You are in a Stink Sewer area, you can go left or right")
        direction = input().lower()
        if direction == "right":
            os.system('cls')
            kitchen_room(player)
        if direction == "left":
            print("You fall into a Trap! GAME OVER!")
            quit()
        else:
            print("Invalid Input! Please choose again!")

def goblin_room(player):
    s = "goblin_room"
    save(s)
    player.current_room = "Dark Hallway"

    while True:
        os.system('cls')
        display_player_info(player, current_room, inventory, player_health)
        print("You walk down the hallway and see a Goblin. He asks you for a copper coin to continue. Give it to him? (yes/no)")
        look = input()

        if look == "yes":
            if "copper coin" in inventory:
                inventory.remove("copper coin")
                hallway_room(player)
                break  # Exit the loop after moving to the next room
            else:
                print("You don't have a copper coin to give.")
        elif look == "no":
            textdisplay3 = "The Goblin named Jeriko lets you pass with a stern warning about the dangers ahead."
            delay_print(textdisplay3)
            print("Under construction")
            game_over(player)
            break  # Exit the loop after displaying the message
        else:
            print("Invalid input. Please enter 'yes' or 'no'.")

            

def random_room(player):

    s = "random_room"
    player.current_room = "random room"
    save(s)
    os.system('cls')
    while True:

        display_player_info(player, current_room, inventory, player_health)
        print("In random room thats under Construction, game over")
        game_over(player)

def menu_room(player):
    
    s = "menu_room"
    player.current_room = "menu room"
    save(s)

    while True: 

        display_player_info(player, current_room, inventory, player_health)
        print("*"*25)
        print("*"*25)
        print("**Imagination Realm***")
        print("*"*25)
        print("*"*25)
        print("Choose by entering the menu number")
        print("................................ ")
        print("(1)  Start Game: ")
        print(" ...............................")
        print("(2)  Quit: ")
        print("..........................")
        print("Enter Number: ")
        direction = input().lower()  # Fixed: use '=' for assignment
        if direction == "1":
            Dungeon(player)
        elif direction == "2":  # Fixed: use 'elif' to avoid executing the 'else' block after 'if'
            game_over(player)
        else:
            print("Invalid Input! Please choose again!")

def game_over(player):

    s = "game_over"
    save(s)
    print("*"*25)
    print("***GAME OVER!!!***")
    print("*"*25)

    print("Do you want to start over on your adventure?")
    direction = input().lower()  
    if direction == "yes":
        menu_room(player)  
    elif direction == "no": 
        game_over(player)

def fight_room(player):

    s = "fight_room"
    save(s)
    player.current_room = "fight room"
    is_game_over = False
    
    while True:
        if is_game_over:
            game_over(player)
        else:
            break

    while True:

        if player.current_room == "fight room":
            print("You find yourself in a face to face with a Giant Crab. You see a door in front of you.")
            action = input("What would you like to do? (enter 'yes' to proceed): ")
            if action.lower() == "yes":
                player.current_room = "beach"
        
        elif player.current_room == "beach":
            print("You are now in a dense beach.")
            npc = NPC("Goblin", 50, 10)
            print("A wild " + npc.name + " appears!")
            while npc.health > 0 and player.health > 0:
                print("\nPlayer Health:", player.health)
                print(npc.name + " Health:", npc.health)
                action = input("What would you like to do? (enter 'attack' to attack, 'run' to run away): ")
                
                if action.lower() == "attack":
                    player.attack_npc(npc)
                    if npc.health > 0:
                        npc_attack = random.randint(1, 10)
                        player.take_damage(npc_attack)
                elif action.lower() == "run":
                    print("You ran away from the " + npc.name + ".")
                    is_game_over = True
                    game_over(player)
                    break
                else:
                    print("Invalid action. Try again.")
                
            if player.health <= 0:
                print("You were defeated by the " + npc.name + ". Game Over.")
                is_game_over = True
                
            elif not is_game_over:
                print("You defeated the " + npc.name + ". You find a potion and some gold.")
                player.potions += 1
                player.gold += random.randint(1, 10)
                addtoinventory("Gold Coins", "potion")
                player.current_room = "menu room"




def main():

    print("Welcome to Imagination Land")
    name = input("Enter your character's name: ")
    player = Player(name)
    print(f"Aloha, {player.name}!")
    menu_room(player)

if __name__ == "__main__":
    main()

    
menu_room()
